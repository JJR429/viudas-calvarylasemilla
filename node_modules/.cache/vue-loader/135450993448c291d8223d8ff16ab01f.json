{"remainingRequest":"/Applications/XAMPP/xamppfiles/htdocs/vue/viudas/node_modules/vue-loader/lib/index.js??vue-loader-options!/Applications/XAMPP/xamppfiles/htdocs/vue/viudas/src/views/votar/Eligir.vue?vue&type=template&id=68f12dcb&scoped=true&","dependencies":[{"path":"/Applications/XAMPP/xamppfiles/htdocs/vue/viudas/src/views/votar/Eligir.vue","mtime":1610486259246},{"path":"/Applications/XAMPP/xamppfiles/htdocs/vue/viudas/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Applications/XAMPP/xamppfiles/htdocs/vue/viudas/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Applications/XAMPP/xamppfiles/htdocs/vue/viudas/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Applications/XAMPP/xamppfiles/htdocs/vue/viudas/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CjxkaXYgY2xhc3M9ImRhc2hib2FyZCI+CiAgPGhlYWRlcgogICAgY2xhc3M9Im10LTUgbWItMTAgcGItMTAgcGFnZS1oZWFkZXItbGlnaHQgYmctd2hpdGUiCiAgICB2LWlmPSIhbG9hbmRpbmciCiAgPgogICAgPGRpdiB2LWlmPSJ0eXBlVXNlciAhPSAnVm90YW50ZSciPgogICAgICA8Tm90QWNjZXNzIC8+CiAgICA8L2Rpdj4KICAgIDxkaXYgdi1lbHNlPgogICAgICA8ZGl2IGNsYXNzPSJwYWdlLWhlYWRlci1jb250ZW50Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPgogICAgICAgICAgPGRpdiBjbGFzcz0icm93IGp1c3RpZnktY29udGVudC1jZW50ZXIiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteGwtNCBtYi01Ij4KICAgICAgICAgICAgICA8cm91dGVyLWxpbmsKICAgICAgICAgICAgICAgIDp0bz0iewogICAgICAgICAgICAgICAgICBwYXRoOiAnL3ZvdGFyLycKICAgICAgICAgICAgICAgIH0iCiAgICAgICAgICAgICAgICBjbGFzcz0iYnRuIGJ0bi13YXJuaW5nIHJvdW5kZWQtcGlsbCIKICAgICAgICAgICAgICAgID48aSBjbGFzcz0iZmFzIGZhLWFycm93LWxlZnQiPjwvaT4gUmVncmVzYXI8L3JvdXRlci1saW5rCiAgICAgICAgICAgICAgPgogICAgICAgICAgICAgIDxociAvPgogICAgICAgICAgICAgIDxpbWcKICAgICAgICAgICAgICAgIGNsYXNzPSJtYi00IgogICAgICAgICAgICAgICAgc3JjPSJodHRwczovL3d3dy5mbGF0aWNvbi5lcy9zdmcvc3RhdGljL2ljb25zL3N2Zy8zMjg4LzMyODgzNjcuc3ZnIgogICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAxMHJlbTsiCiAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICA8aDEgY2xhc3M9InRleHQtYmx1ZSBmb250LXdlaWdodC1ib2xkIj4KICAgICAgICAgICAgICAgIHt7IGN1cnJlbnRVc2VyLm5vbWJyZXMgfX0KICAgICAgICAgICAgICA8L2gxPgogICAgICAgICAgICAgIDxwIGNsYXNzPSJwYWdlLWhlYWRlci10ZXh0Ij4KICAgICAgICAgICAgICAgIEVtaXRlIHR1IHZvdG8gY29uIHRvdGFsIGZhY2lsaWRhZC4KICAgICAgICAgICAgICA8L3A+CgogICAgICAgICAgICAgIDxociAvPgogICAgICAgICAgICAgIDxoMj5Pcmdhbml6YWNpw7NuPC9oMj4KICAgICAgICAgICAgICA8c3Ryb25nPk5vbWJyZTo8L3N0cm9uZz4ge3sgY3VycmVudFVzZXIub3JnYW5pemFjaW9uWzBdLm5vbWJyZXMKICAgICAgICAgICAgICB9fTxiciAvPgogICAgICAgICAgICAgIDxzdHJvbmc+RGVzY3JpcGNpw7NuOjwvc3Ryb25nPgogICAgICAgICAgICAgIHt7IGN1cnJlbnRVc2VyLm9yZ2FuaXphY2lvblswXS5kZXNjaXBjaW9uIH19PGJyIC8+CiAgICAgICAgICAgICAgPHN0cm9uZz5EaXJlY2Npw7NuOjwvc3Ryb25nPgogICAgICAgICAgICAgIHt7IGN1cnJlbnRVc2VyLm9yZ2FuaXphY2lvblswXS5kaXJlY2Npb24gfX08YnIgLz4KICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1pZj0iY3VycmVudFVzZXIub3JnYW5pemFjaW9uWzBdLmVzdGFkbyA9PSAwIj4KICAgICAgICAgICAgICAgIDxzdHJvbmc+RXN0YWRvOjwvc3Ryb25nPiA8YiBjbGFzcz0idGV4dC13YXJuaW5nIj5JTkFDVElWTzwvYgogICAgICAgICAgICAgICAgPjxiciAvPgogICAgICAgICAgICAgIDwvdGVtcGxhdGU+CiAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtaWY9ImN1cnJlbnRVc2VyLm9yZ2FuaXphY2lvblswXS5lc3RhZG8gPT0gMSI+CiAgICAgICAgICAgICAgICA8c3Ryb25nPkVzdGFkbzo8L3N0cm9uZz4gPGIgY2xhc3M9InRleHQtd2FybmluZyI+QUNUSVZPPC9iCiAgICAgICAgICAgICAgICA+PGJyIC8+CiAgICAgICAgICAgICAgPC90ZW1wbGF0ZT4KICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1pZj0iY3VycmVudFVzZXIub3JnYW5pemFjaW9uWzBdLmVzdGFkbyA9PSAyIj4KICAgICAgICAgICAgICAgIDxzdHJvbmc+RXN0YWRvOjwvc3Ryb25nPiA8YiBjbGFzcz0idGV4dC13YXJuaW5nIj5TVVNQRU5ESURPPC9iCiAgICAgICAgICAgICAgICA+PGJyIC8+CiAgICAgICAgICAgICAgPC90ZW1wbGF0ZT4KICAgICAgICAgICAgICA8c3Ryb25nPkZlY2hhIENyZWFkYTo8L3N0cm9uZz4KICAgICAgICAgICAgICB7eyBjdXJyZW50VXNlci5vcmdhbml6YWNpb25bMF0uZmVjaGFjcmVhZGEgfX0KICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteGwtOCBjb2wtbGctMTAgdGV4dC1jZW50ZXIgcHQtNSI+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyB0ZXh0LWNlbnRlciBtYi00Ij4KICAgICAgICAgICAgICAgICAgPCEtLSBIZWFkZXIgc2VjdGlvbiBmb3IgYnV0dG9ucyB7Y3JlYXRlfSAtLT4KICAgICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICA8aDEKICAgICAgICAgICAgICAgICAgICAgIHYtaWY9ImVsZWNjaW9uLmRhdGEubGVuZ3RoID4gMCIKICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJ0ZXh0LWNhcGl0YWxpemUgIHRleHQtcHJpbWFyeSBmb250LXdlaWdodC1ib2xkIgogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgIFZvdGFjaW9uZXMgcGFyYSB7eyBlbGVjY2lvbi5kYXRhWzBdLm5vbWJyZXMgfX0KICAgICAgICAgICAgICAgICAgICA8L2gxPgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGVudCI+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1iLTIiIHYtaWY9IiFwcmVndW50YXMubG9hbmRpbmciPgogICAgICAgICAgICAgICAgICAgIDxkaXYgdi1pZj0icHJlZ3VudGFzLmRhdGEubGVuZ3RoID4gMCI+CiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHYtaWY9InZlcmlmaWNhclZvdGFjaW9uLmRhdGEubGVuZ3RoIDw9IDAiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNhcmQgbWItNCIKICAgICAgICAgICAgICAgICAgICAgICAgICB2LWZvcj0iKHByZWd1bnRhLCBpbmRleCkgaW4gcHJlZ3VudGFzLmRhdGEiCiAgICAgICAgICAgICAgICAgICAgICAgICAgdi1iaW5kOnRvZG89InByZWd1bnRhIgogICAgICAgICAgICAgICAgICAgICAgICAgIHYtYmluZDprZXk9InByZWd1bnRhLmlkIgogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1oZWFkZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iaWNvbi1zdGFjayBpY29uLXN0YWNrIGJnLWJsdWUgdGV4dC13aGl0ZSBmbGV4LXNocmluay0wIG1yLTQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7IGluZGV4ICsgMSB9fQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0ZXh0LXJpZ2h0IHRpdGxlLXRlbWEiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDIgY2xhc3M9InRleHQtYmx1ZSBmb250LXdlaWdodC1ib2xkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eyBwcmVndW50YS5wcmVndW50YSB9fQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2gyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1ib2R5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0ZXh0LWxlZnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eyBwcmVndW50YS5kZXNjcmlwY2lvbiB9fQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJ0ZXh0LWxlZnQgdGV4dC1ibHVlIGZvbnQtd2VpZ2h0LWJvbGQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPcGNpb25lcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9oMz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1mb3I9IihvcGNpb24sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wY2lvbl9pbmRleCkgaW4gcHJlZ3VudGEub3BjaW9uZXMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYtYmluZDp0b2RvPSJvcGNpb24iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYtYmluZDprZXk9Im9wY2lvbi5pZCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYtaWY9Im1hcmNhck9wY2lvbihwcmVndW50YS5pZCwgb3BjaW9uLmlkKSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2FyZCBiZy1ncmVlbiBweS0yIHBsLTIgcHItMiBtdC0yIG1iLTIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkLWZsZXgganVzdGlmeS1jb250ZW50LWJldHdlZW4iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iaWNvbi1zdGFjayBpY29uLXN0YWNrIGJnLXdoaXRlLXNvZnQgZm9udC13ZWlnaHQtYm9sZCB0ZXh0LWJsYWNrIGZsZXgtc2hyaW5rLTAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7IG9wY2lvbl9pbmRleCArIDEgfX0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0idGl0bGUtY2xhc3MtY29udGVudCB0ZXh0LWxlZnQgcGwtMyBwdC0xIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJ0ZXh0LWRhcmsgZm9udC13ZWlnaHQtYm9sZCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+e3sgb3BjaW9uLm9wY2lvbiB9fTwvc3BhbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImQtZmxleCBtdC0xIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iYnRuIGJ0bi1tZCBidG4td2FybmluZyBtbC0yIG1yLTIgdGV4dC13aGl0ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVzY29nZXJPcGNpb24oCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJlZ3VudGEuaWQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJlZ3VudGEucHJlZ3VudGEsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3BjaW9uLmlkLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wY2lvbi5vcGNpb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEVzY29naWRvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1lbHNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNhcmQgYmctd2FybmluZy1zb2Z0IHB5LTIgcGwtMiBwci0yIG10LTIgbWItMiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImQtZmxleCBqdXN0aWZ5LWNvbnRlbnQtYmV0d2VlbiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJpY29uLXN0YWNrIGljb24tc3RhY2sgYmctd2hpdGUtc29mdCBmb250LXdlaWdodC1ib2xkIHRleHQtYmxhY2sgZmxleC1zaHJpbmstMCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3sgb3BjaW9uX2luZGV4ICsgMSB9fQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJ0aXRsZS1jbGFzcy1jb250ZW50IHRleHQtbGVmdCBwbC0zIHB0LTEiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InRleHQtZGFyayBmb250LXdlaWdodC1ib2xkIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID57eyBvcGNpb24ub3BjaW9uIH19PC9zcGFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZC1mbGV4IG10LTEiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJidG4gYnRuLW1kIGJ0bi1wcmltYXJ5IG1sLTIgbXItMiB0ZXh0LXdoaXRlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGNsaWNrPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXNjb2dlck9wY2lvbigKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmVndW50YS5pZCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmVndW50YS5wcmVndW50YSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGNpb24uaWQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3BjaW9uLm9wY2lvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRXNjb2dlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJhbGVydCBhbGVydC1kYW5nZXIgZm9udC13ZWlnaHQtYm9sZCB0ZXh0LWxlZnQiCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICA8dWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNpIG5vIGVzY29nZXMgbmkgdW5hIG9wY2nDs24sIHNlIG1hcmNhcmEKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXV0b21hdGljYW1lbnRlIGNvbW8gIkVOIEJMQU5DTyIuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBFbiBjYXNvIGRlIHF1ZSBxdWllcmFzIEFOVUxBUiB0dSB2b3RvLCBzb2xvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmNhICJOSU5HVU5PIiB5IHNlIGNvbnNpZGVyYXLDoSBOVUxPLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJidG4gYnRuLXByaW1hcnkgYnRuLWxnIGxpZnQgZm9udC13ZWlnaHQtYm9sZCIKICAgICAgICAgICAgICAgICAgICAgICAgICBAY2xpY2s9Im9wZW5Nb2RhbFByZXZpZXdWb3RvKCkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmPSJidG5FbWl0aXJWb3RvIgogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjPSJodHRwczovL3d3dy5mbGF0aWNvbi5lcy9zdmcvc3RhdGljL2ljb25zL3N2Zy8xMDQ5LzEwNDk1ODcuc3ZnIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg9IjUwIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0PSJ2b3RhciIKICAgICAgICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICAgICAgICAgIFBSRVZJU1VBTElaQVIgWSBWT1RBUgogICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgPGRpdiB2LWVsc2UgY2xhc3M9IiB0ZXh0LWxlZnQgcHktNSBweC01Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGgyIGNsYXNzPSJ0ZXh0LXdhcm5pbmcgZm9udC13ZWlnaHQtYm9sZCBtYi0zIj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM9Imh0dHBzOi8vd3d3LmZsYXRpY29uLmNvbS9zdmcvc3RhdGljL2ljb25zL3N2Zy8xMTYxLzExNjEzOTAuc3ZnIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg9IjcwIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0PSIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICBZYSBFbWl0aXN0ZSB0dSB2b3RvLgogICAgICAgICAgICAgICAgICAgICAgICA8L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8YnIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgPGhyIC8+CiAgICAgICAgICAgICAgICAgICAgICAgIDxoMT5SRVNVTUVOIERFIFNVIFZPVE88L2gxPgogICAgICAgICAgICAgICAgICAgICAgICA8aHIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgPGgyIHYtaWY9ImVsZWNjaW9uLmRhdGEubGVuZ3RoID4gMCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgRWxlY2Npb25lczoge3sgZWxlY2Npb24uZGF0YVswXS5ub21icmVzIH19CiAgICAgICAgICAgICAgICAgICAgICAgIDwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxoMj4KICAgICAgICAgICAgICAgICAgICAgICAgICBPcmdhbml6YWNpw7NuOgogICAgICAgICAgICAgICAgICAgICAgICAgIHt7IGN1cnJlbnRVc2VyLm9yZ2FuaXphY2lvblswXS5ub21icmVzIH19CiAgICAgICAgICAgICAgICAgICAgICAgIDwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxociAvPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZvcm0tcm93IgogICAgICAgICAgICAgICAgICAgICAgICAgIHYtZm9yPSJ2b3RhY2lvbiBpbiB2ZXJpZmljYXJWb3RhY2lvbi5kYXRhIgogICAgICAgICAgICAgICAgICAgICAgICAgIHYtYmluZDp0b2RvPSJ2b3RhY2lvbiIKICAgICAgICAgICAgICAgICAgICAgICAgICB2LWJpbmQ6a2V5PSJ2b3RhY2lvbi5pZCIKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAgY29sLW1kLTEyIHRleHQtbGVmdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9InRleHQtcHJpbWFyeSBmb250LXdlaWdodC1ib2xkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3sgdm90YWNpb24ucHJlZ3VudGEgfX0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ic21hbGwgdGV4dC1ncmF5LTYwMCBmb250LXdlaWdodC1ib2xkIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+e3sgdm90YWNpb24ub3BjaW9uIH19PC9sYWJlbAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGJyIC8+CiAgICAgICAgICAgICAgICAgICAgICAgIDxociAvPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+Vm90byBlbWl0aWRvIGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Ryb25nIGNsYXNzPSJ0ZXh0LXByaW1hcnkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID5NYXlWb3RvPC9zdHJvbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgID48L3NwYW4KICAgICAgICAgICAgICAgICAgICAgICAgICA+PGJyIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgID5GZWNoYSB5IGhvcmE6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eyB2ZXJpZmljYXJWb3RhY2lvbi5kYXRhWzBdLmZlY2hhdm90YWNpb24gfX0KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGRpdiB2LWVsc2UgY2xhc3M9InB5LTUgcHgtNSI+CiAgICAgICAgICAgICAgICAgICAgICA8aDIgY2xhc3M9InRleHQtd2FybmluZyBmb250LXdlaWdodC1ib2xkIj4KICAgICAgICAgICAgICAgICAgICAgICAgTm8gaGF5IHByZWd1bnRhcyBwYXJhIGVzdGEgZWxlY2Npw7NuLgogICAgICAgICAgICAgICAgICAgICAgPC9oMj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1iLTIiIHYtZWxzZT4KICAgICAgICAgICAgICAgICAgICA8aDI+Q2FyZ2FuZG8uLi48L2gyPgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgIDxkaXYgaWQ9InByaW50LXZvdG8iPgogICAgICAgICAgICA8aDE+UkVTVU1FTiBERWwgVk9UTzwvaDE+CiAgICAgICAgICAgIDxociAvPgogICAgICAgICAgICA8aDIgdi1pZj0iZWxlY2Npb24uZGF0YS5sZW5ndGggPiAwIj4KICAgICAgICAgICAgICBFbGVjY2lvbmVzOiB7eyBlbGVjY2lvbi5kYXRhWzBdLm5vbWJyZXMgfX0KICAgICAgICAgICAgPC9oMj4KICAgICAgICAgICAgPGgyPk9yZ2FuaXphY2nDs246IHt7IGN1cnJlbnRVc2VyLm9yZ2FuaXphY2lvblswXS5ub21icmVzIH19PC9oMj4KICAgICAgICAgICAgPGhyIC8+CiAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICBjbGFzcz0iZm9ybS1yb3ciCiAgICAgICAgICAgICAgdi1mb3I9InZvdG8gaW4gdm90by5kYXRhIgogICAgICAgICAgICAgIHYtYmluZDp0b2RvPSJ2b3RvIgogICAgICAgICAgICAgIHYtYmluZDprZXk9InZvdG8uaWQiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIGNvbC1tZC0xMiB0ZXh0LWxlZnQiPgogICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJ0ZXh0LXByaW1hcnkgZm9udC13ZWlnaHQtYm9sZCI+CiAgICAgICAgICAgICAgICAgIHt7IHZvdG8ucHJlZ3VudGEgfX0KICAgICAgICAgICAgICAgIDwvaDM+CiAgICAgICAgICAgICAgICA8YnIgLz4KICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0ic21hbGwgdGV4dC1ncmF5LTYwMCBmb250LXdlaWdodC1ib2xkIj57ewogICAgICAgICAgICAgICAgICB2b3RvLm9wY2lvbgogICAgICAgICAgICAgICAgfX08L2xhYmVsPgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGJyIC8+CiAgICAgICAgICAgIDxiciAvPgogICAgICAgICAgICA8YnIgLz4KICAgICAgICAgICAgPGhyIC8+CiAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgPHNwYW4KICAgICAgICAgICAgICAgID5Wb3RvIGVtaXRpZG8gZW4KICAgICAgICAgICAgICAgIDxzdHJvbmcgY2xhc3M9InRleHQtcHJpbWFyeSI+TWF5Vm90bzwvc3Ryb25nPjwvc3BhbgogICAgICAgICAgICAgID48YnIgLz4KICAgICAgICAgICAgICA8c3Bhbj5GZWNoYSB5IGhvcmE6IHt7IHRvZGF5IH19IDwvc3Bhbj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICA8IS0tIE1vZGFsIFNhdmUgUHJlZ3VudGEgLS0+CiAgICAgICAgICA8Yi1tb2RhbCBpZD0ibW9kYWxQcmV2aWV3Vm90byIgY2VudGVyZWQ+CiAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6bW9kYWwtaGVhZGVyPSIiPgogICAgICAgICAgICAgIDxoMyBjbGFzcz0ibW9kYWwtdGl0bGUgdGV4dC1ibHVlIj5SRVNVTUVOIERFIFNVIFZPVE88L2gzPgogICAgICAgICAgICA8L3RlbXBsYXRlPgogICAgICAgICAgICA8dGVtcGxhdGUgdi1zbG90OmRlZmF1bHQ9IiI+CiAgICAgICAgICAgICAgPGgyIGNsYXNzPSJ0ZXh0LXByaW1hcnkiIHYtaWY9ImVsZWNjaW9uLmRhdGEubGVuZ3RoID4gMCI+CiAgICAgICAgICAgICAgICB7eyBlbGVjY2lvbi5kYXRhWzBdLm5vbWJyZXMgfX0KICAgICAgICAgICAgICA8L2gyPgogICAgICAgICAgICAgIDxoMz5Pcmdhbml6YWNpw7NuOiB7eyBjdXJyZW50VXNlci5vcmdhbml6YWNpb25bMF0ubm9tYnJlcyB9fTwvaDM+CiAgICAgICAgICAgICAgPGhyIC8+CiAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgY2xhc3M9ImZvcm0tcm93IgogICAgICAgICAgICAgICAgdi1mb3I9InZvdG8gaW4gdm90by5kYXRhIgogICAgICAgICAgICAgICAgdi1iaW5kOnRvZG89InZvdG8iCiAgICAgICAgICAgICAgICB2LWJpbmQ6a2V5PSJ2b3RvLmlkIgogICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAgY29sLW1kLTEyIHRleHQtbGVmdCI+CiAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0idGV4dC1kYXJrIGZvbnQtd2VpZ2h0LWJvbGQiPnt7CiAgICAgICAgICAgICAgICAgICAgdm90by5wcmVndW50YQogICAgICAgICAgICAgICAgICB9fTwvbGFiZWwKICAgICAgICAgICAgICAgICAgPjxiciAvPgogICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9InNtYWxsIHRleHQtZ3JheS02MDAgZm9udC13ZWlnaHQtYm9sZCI+e3sKICAgICAgICAgICAgICAgICAgICB2b3RvLm9wY2lvbgogICAgICAgICAgICAgICAgICB9fTwvbGFiZWw+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8aHIgLz4KICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJidG4gYnRuLWRhcmsgYnRuLXNtIG1yLTIiIEBjbGljaz0icHJpbnRWb3RvKCkiPgogICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhcyBmYS1wcmludCI+PC9pPiBJbXByaW1pcgogICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9ImJ0biBidG4tZGFuZ2VyIGJ0bi1zbSBtci0yIiBAY2xpY2s9InByaW50Vm90bygpIj4KICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYXMgZmEtZmlsZS1wZGYiPjwvaT4gRGVzY2FyZ2FyIFBERgogICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImVycm9yLW1vZGFsIiB2LWlmPSJlbWl0aXJWb3RvLmVycm9yIj4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0ZXh0LXJlZCI+IHt7IGVtaXRpclZvdG8uZXJyb3JfbWVzc2FnZSB9fTwvc3Bhbj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC90ZW1wbGF0ZT4KCiAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6bW9kYWwtZm9vdGVyPSJ7IG9rLCBjYW5jZWwgfSI+CiAgICAgICAgICAgICAgPGItYnV0dG9uCiAgICAgICAgICAgICAgICBzaXplPSJtZCIKICAgICAgICAgICAgICAgIGNsYXNzPSJidG4gYnRuLXdoaXRlIHJvdW5kZWQtcGlsbCIKICAgICAgICAgICAgICAgIEBjbGljaz0iY2FuY2VsKCkiCiAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgQ2FuY2VsYXIKICAgICAgICAgICAgICA8L2ItYnV0dG9uPgogICAgICAgICAgICAgIDxiLWJ1dHRvbgogICAgICAgICAgICAgICAgc2l6ZT0ibWQiCiAgICAgICAgICAgICAgICBjbGFzcz0iYnRuIGJ0bi1ibHVlIHJvdW5kZWQtcGlsbCIKICAgICAgICAgICAgICAgIEBjbGljaz0idm90YXIiCiAgICAgICAgICAgICAgICByZWY9ImJ0blZvdGFyIgogICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxpbWcKICAgICAgICAgICAgICAgICAgc3JjPSJodHRwczovL3d3dy5mbGF0aWNvbi5lcy9zdmcvc3RhdGljL2ljb25zL3N2Zy8xNTMzLzE1MzM5MTMuc3ZnIgogICAgICAgICAgICAgICAgICB3aWR0aD0iMzAiCiAgICAgICAgICAgICAgICAgIGFsdD0iIgogICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgIEVNSVRJUiBWT1RPCiAgICAgICAgICAgICAgPC9iLWJ1dHRvbj4KICAgICAgICAgICAgPC90ZW1wbGF0ZT4KICAgICAgICAgIDwvYi1tb2RhbD4KICAgICAgICAgIDwhLS0gRW5kIG1vZGFsIC0tPgoKICAgICAgICAgIDwhLS0gTW9kYWwgRGVsZXRlIE9wY2lvbiAtLT4KICAgICAgICAgIDxiLW1vZGFsIGlkPSJtb2RhbE1lbnNhamUiIGNlbnRlcmVkPgogICAgICAgICAgICA8dGVtcGxhdGUgdi1zbG90Om1vZGFsLWhlYWRlcj0iIj4KICAgICAgICAgICAgICA8aDMgY2xhc3M9Im1vZGFsLXRpdGxlIiB2LWlmPSJlbWl0aXJWb3RvLm5fZXJyb3IgPT0gMCI+CiAgICAgICAgICAgICAgICBDYXJnYW5kby4uLgogICAgICAgICAgICAgIDwvaDM+CiAgICAgICAgICAgICAgPGgzIGNsYXNzPSJtb2RhbC10aXRsZSIgdi1lbHNlPk1lbnNhamU8L2gzPgogICAgICAgICAgICA8L3RlbXBsYXRlPgogICAgICAgICAgICA8dGVtcGxhdGUgdi1zbG90OmRlZmF1bHQ9IiI+CiAgICAgICAgICAgICAgPGkKICAgICAgICAgICAgICAgIHYtaWY9ImVtaXRpclZvdG8ubl9lcnJvciA9PSAwIgogICAgICAgICAgICAgICAgY2xhc3M9ImZhcyBmYS1jaXJjbGUtbm90Y2ggZmEtc3BpbiBmYS0zeCIKICAgICAgICAgICAgICA+PC9pPgogICAgICAgICAgICAgIDxoMiB2LWVsc2UgY2xhc3M9InRleHQtZ3JlZW4gIj4KICAgICAgICAgICAgICAgIFN1IHZvdG8gZnVlIGVtaXRpZG8gZXhpdMOzc2FtZW50ZSEKICAgICAgICAgICAgICA8L2gyPgogICAgICAgICAgICAgIDxociAvPgogICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9ImJ0biBidG4tZGFyayBidG4tc20gbXItMiIgQGNsaWNrPSJwcmludFZvdG8oKSI+CiAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmFzIGZhLXByaW50Ij48L2k+IEltcHJpbWlyCiAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0iYnRuIGJ0bi1kYW5nZXIgYnRuLXNtIG1yLTIiIEBjbGljaz0icHJpbnRWb3RvKCkiPgogICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhcyBmYS1maWxlLXBkZiI+PC9pPiBEZXNjYXJnYXIgUERGCiAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgIDwvdGVtcGxhdGU+CiAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6bW9kYWwtZm9vdGVyPSJ7IG9rLCBjYW5jZWwgfSI+CiAgICAgICAgICAgICAgPGItYnV0dG9uCiAgICAgICAgICAgICAgICBzaXplPSJtZCIKICAgICAgICAgICAgICAgIGNsYXNzPSJidG4gYnRuLXdoaXRlIHJvdW5kZWQtcGlsbCIKICAgICAgICAgICAgICAgIEBjbGljaz0iY2FuY2VsKCkiCiAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgQ2VycmFyCiAgICAgICAgICAgICAgPC9iLWJ1dHRvbj4KICAgICAgICAgICAgICA8Yi1idXR0b24KICAgICAgICAgICAgICAgIHNpemU9Im1kIgogICAgICAgICAgICAgICAgY2xhc3M9ImJ0biBidG4tcmVkIHJvdW5kZWQtcGlsbCIKICAgICAgICAgICAgICAgIEBjbGljaz0iR29Ub0JhY2soKSIKICAgICAgICAgICAgICAgIHJlZj0iYnRuT2tNZW5zYWplIgogICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIE9LCiAgICAgICAgICAgICAgPC9iLWJ1dHRvbj4KICAgICAgICAgICAgPC90ZW1wbGF0ZT4KICAgICAgICAgIDwvYi1tb2RhbD4KICAgICAgICAgIDwhLS0gRW5kIG1vZGFsIC0tPgogICAgICAgIDwvZGl2PgogICAgICA8L2Rpdj4KICAgIDwvZGl2PgogIDwvaGVhZGVyPgoKICA8ZGl2IGNsYXNzPSJkYXNoIiB2LWVsc2U+CiAgICA8cD5Mb2FuZGluZy4uLjwvcD4KICA8L2Rpdj4KPC9kaXY+Cg=="},null]}