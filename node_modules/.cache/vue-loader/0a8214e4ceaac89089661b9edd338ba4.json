{"remainingRequest":"/Applications/XAMPP/xamppfiles/htdocs/vue/viudas/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Applications/XAMPP/xamppfiles/htdocs/vue/viudas/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Applications/XAMPP/xamppfiles/htdocs/vue/viudas/node_modules/vue-loader/lib/index.js??vue-loader-options!/Applications/XAMPP/xamppfiles/htdocs/vue/viudas/src/views/Login.vue?vue&type=template&id=26084dc2&scoped=true&","dependencies":[{"path":"/Applications/XAMPP/xamppfiles/htdocs/vue/viudas/src/views/Login.vue","mtime":1611691833618},{"path":"/Applications/XAMPP/xamppfiles/htdocs/vue/viudas/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Applications/XAMPP/xamppfiles/htdocs/vue/viudas/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Applications/XAMPP/xamppfiles/htdocs/vue/viudas/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Applications/XAMPP/xamppfiles/htdocs/vue/viudas/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}