{"remainingRequest":"/Applications/XAMPP/xamppfiles/htdocs/vue/viudas/node_modules/vue-loader/lib/index.js??vue-loader-options!/Applications/XAMPP/xamppfiles/htdocs/vue/viudas/src/views/organizadores/Elecciones.vue?vue&type=template&id=0076b76b&scoped=true&","dependencies":[{"path":"/Applications/XAMPP/xamppfiles/htdocs/vue/viudas/src/views/organizadores/Elecciones.vue","mtime":1610486259239},{"path":"/Applications/XAMPP/xamppfiles/htdocs/vue/viudas/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Applications/XAMPP/xamppfiles/htdocs/vue/viudas/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Applications/XAMPP/xamppfiles/htdocs/vue/viudas/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Applications/XAMPP/xamppfiles/htdocs/vue/viudas/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CjxkaXYgY2xhc3M9ImRhc2hib2FyZCI+CiAgPGhlYWRlcgogICAgY2xhc3M9Im10LTUgbWItMTAgcGItMTAgcGFnZS1oZWFkZXItbGlnaHQgYmctd2hpdGUiCiAgICB2LWlmPSIhbG9hbmRpbmciCiAgPgogICAgPGRpdiB2LWlmPSJ0eXBlVXNlciAhPSAnT3JnYW5pemFkb3InIj4KICAgICAgPE5vdEFjY2VzcyAvPgogICAgPC9kaXY+CiAgICA8ZGl2IHYtZWxzZT4KICAgICAgPGRpdiBjbGFzcz0icGFnZS1oZWFkZXItY29udGVudCI+CiAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXhsLTQgbWItNSBtdC0yIj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhbGlnbi1pdGVtcy1jZW50ZXIiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGV4dC1jZW50ZXIgbXQtMiI+CiAgICAgICAgICAgICAgICAgIDxyb3V0ZXItbGluawogICAgICAgICAgICAgICAgICAgIDp0bz0iewogICAgICAgICAgICAgICAgICAgICAgcGF0aDogJy9vcmdhbml6YWRvcmVzLycKICAgICAgICAgICAgICAgICAgICB9IgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJidG4gYnRuLXdhcm5pbmcgcm91bmRlZC1waWxsIgogICAgICAgICAgICAgICAgICAgID48aSBjbGFzcz0iZmFzIGZhLWFycm93LWxlZnQiPjwvaT4gUmVncmVzYXI8L3JvdXRlci1saW5rCiAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgPGhyIC8+CiAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJjYXJkLXRleHQgdGV4dC1ncmF5LTYwMCI+CiAgICAgICAgICAgICAgICAgICAgPGltZwogICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Imljb24tZGV0YWlscyIKICAgICAgICAgICAgICAgICAgICAgIHNyYz0iaHR0cHM6Ly9pbWFnZS5mbGF0aWNvbi5jb20vaWNvbnMvc3ZnLzE0ODQvMTQ4NDg3NS5zdmciCiAgICAgICAgICAgICAgICAgICAgICBhbHQ9IlNjaG9vbCBJY29uIgogICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4+e3sgdHlwZVVzZXIgfX08L3NwYW4+CiAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDxociAvPgogICAgICAgICAgICAgIDxoMSBjbGFzcz0idGV4dC1ibHVlIGZvbnQtd2VpZ2h0LWJvbGQiPgogICAgICAgICAgICAgICAge3sgY3VycmVudFVzZXIubm9tYnJlcyB9fQogICAgICAgICAgICAgIDwvaDE+CiAgICAgICAgICAgICAgPHAgY2xhc3M9InBhZ2UtaGVhZGVyLXRleHQiPgogICAgICAgICAgICAgICAgTWFuZWpvIGNvbXBsZXRvIGRlIGxhcyBlbGVjY2lvbmVzCiAgICAgICAgICAgICAgPC9wPgoKICAgICAgICAgICAgICA8aHIgLz4KICAgICAgICAgICAgICA8aDI+T3JnYW5pemFjacOzbjwvaDI+CiAgICAgICAgICAgICAgPHN0cm9uZz5Ob21icmU6PC9zdHJvbmc+IHt7IGN1cnJlbnRVc2VyLm9yZ2FuaXphY2lvblswXS5ub21icmVzCiAgICAgICAgICAgICAgfX08YnIgLz4KICAgICAgICAgICAgICA8c3Ryb25nPkRlc2NyaXBjacOzbjo8L3N0cm9uZz4KICAgICAgICAgICAgICB7eyBjdXJyZW50VXNlci5vcmdhbml6YWNpb25bMF0uZGVzY2lwY2lvbiB9fTxiciAvPgogICAgICAgICAgICAgIDxzdHJvbmc+RGlyZWNjacOzbjo8L3N0cm9uZz4KICAgICAgICAgICAgICB7eyBjdXJyZW50VXNlci5vcmdhbml6YWNpb25bMF0uZGlyZWNjaW9uIH19PGJyIC8+CiAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtaWY9ImN1cnJlbnRVc2VyLm9yZ2FuaXphY2lvblswXS5lc3RhZG8gPT0gMCI+CiAgICAgICAgICAgICAgICA8c3Ryb25nPkVzdGFkbzo8L3N0cm9uZz4gPGIgY2xhc3M9InRleHQtd2FybmluZyI+SU5BQ1RJVk88L2IKICAgICAgICAgICAgICAgID48YnIgLz4KICAgICAgICAgICAgICA8L3RlbXBsYXRlPgogICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LWlmPSJjdXJyZW50VXNlci5vcmdhbml6YWNpb25bMF0uZXN0YWRvID09IDEiPgogICAgICAgICAgICAgICAgPHN0cm9uZz5Fc3RhZG86PC9zdHJvbmc+IDxiIGNsYXNzPSJ0ZXh0LXdhcm5pbmciPkFDVElWTzwvYgogICAgICAgICAgICAgICAgPjxiciAvPgogICAgICAgICAgICAgIDwvdGVtcGxhdGU+CiAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtaWY9ImN1cnJlbnRVc2VyLm9yZ2FuaXphY2lvblswXS5lc3RhZG8gPT0gMiI+CiAgICAgICAgICAgICAgICA8c3Ryb25nPkVzdGFkbzo8L3N0cm9uZz4gPGIgY2xhc3M9InRleHQtd2FybmluZyI+U1VTUEVORElETzwvYgogICAgICAgICAgICAgICAgPjxiciAvPgogICAgICAgICAgICAgIDwvdGVtcGxhdGU+CiAgICAgICAgICAgICAgPHN0cm9uZz5GZWNoYSBDcmVhZGE6PC9zdHJvbmc+CiAgICAgICAgICAgICAge3sgY3VycmVudFVzZXIub3JnYW5pemFjaW9uWzBdLmZlY2hhY3JlYWRhIH19CiAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXhsLTggY29sLWxnLTEwIHRleHQtY2VudGVyIHB0LTIiPgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBkLWZsZXgganVzdGlmeS1jb250ZW50LWJldHdlZW4gbWItNCI+CiAgICAgICAgICAgICAgICA8IS0tIEhlYWRlciBzZWN0aW9uIGZvciBidXR0b25zIHtjcmVhdGV9IC0tPgogICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgPGgxIGNsYXNzPSJ0ZXh0LWNhcGl0YWxpemUgdGV4dC1wcmltYXJ5IGZvbnQtd2VpZ2h0LWJvbGQiPgogICAgICAgICAgICAgICAgICAgIEVsZWNjaW9uZXMgcGFyYSB7eyBjdXJyZW50VXNlci5vcmdhbml6YWNpb25bMF0ubm9tYnJlcyB9fQogICAgICAgICAgICAgICAgICA8L2gxPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSByb3VuZGVkLXBpbGwgZmxpdCIKICAgICAgICAgICAgICAgICAgICBAY2xpY2s9Im9wZW5Nb2RhbFNhdmUoKSIKICAgICAgICAgICAgICAgICAgICByZWY9ImJ0blNhdmUiCiAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICBBZ3JlZ2FyIEVsZWNjacOzbiA8aSBjbGFzcz0iZmFzIGZhLXBsdXMiPjwvaT4KICAgICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWItMiIgdi1pZj0iIWVsZWNjaW9uZXMubG9hbmRpbmciPgogICAgICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAgICAgdi1pZj0iZWxlY2Npb25lcy5kYXRhLmxlbmd0aCA+IDAiCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9Imxpc3QtZ3JvdXAgbGlzdC1ncm91cC1mbHVzaCB0ZXh0LWxlZnQiCiAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAgICAgICB2LWZvcj0iKGVsZWNjaW9uLCBpbmRleCkgaW4gZWxlY2Npb25lcy5kYXRhIgogICAgICAgICAgICAgICAgICAgICAgdi1iaW5kOnRvZG89ImVsZWNjaW9uIgogICAgICAgICAgICAgICAgICAgICAgdi1iaW5kOmtleT0iZWxlY2Npb24uaWQiCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgPCEtLSB2LWlmcyBhY2NvcmRpbmcgdG8gc3RhdHVzIC0tPgogICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZCBtYi0yIiB2LWlmPSJlbGVjY2lvbi5lc3RhZG8gPT0gMSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibGlzdC1ncm91cC1pdGVtIGxpc3QtZ3JvdXAtaXRlbS1hY3Rpb24gcHktNCIKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImQtZmxleCBqdXN0aWZ5LWNvbnRlbnQtYmV0d2VlbiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtci00IGQtZmxleCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iaWNvbi1zdGFjayBpY29uLXN0YWNrIGJnLWdyZWVuIHRleHQtd2hpdGUgZmxleC1zaHJpbmstMCBtci00IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhcyBmYS1jaGVjayI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cm91dGVyLWxpbmsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDp0bz0iewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXRoOiAnL2VsZWNjaW9uZXMvJyArIGVsZWNjaW9uLmlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMiBjbGFzcz0idGV4dC1ncmVlbiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7IGVsZWNjaW9uLm5vbWJyZXMgfX0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9yb3V0ZXItbGluaz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iY2FyZC10ZXh0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7IGVsZWNjaW9uLmRlc2NyaXBjaW9uIH19PGJyIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBGZWNoYToge3sgZWxlY2Npb24uZmVjaGEgfX08YnIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEhvcmEgSW5pY2lvOiB7eyBlbGVjY2lvbi5ob3JhaW5pY2lvIH19IHwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEhvcmEgRmluOiB7eyBlbGVjY2lvbi5ob3JhZmluIH19CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ic21hbGwgdGV4dC1kYXJrIGZsZXgtc2hyaW5rLTAgdGV4dC1yaWdodCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUG9yIHt7IHR5cGVVc2VyIH19PGJyIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iYmFkZ2UgYmFkZ2UtZ3JlZW4gYmFkZ2UtcGlsbCB0ZXh0LXdoaXRlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUHVibGljYWRvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIElmIGVzIHByb2Zlc29yLCB5IGVzIGF1dG9yIGRlbCBjdXJzbywgbW9zdHJhciBwYXJhIGVkaXRhciAtLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibXQtMiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImJ0biBidG4teHMgYnRuLWluZGlnby1zb2Z0IG1sLTIgbXItMiB0ZXh0LWluZGlnbyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz0ib3Blbk1vZGFsVXBkYXRlKGluZGV4KSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZj0iYnRuVXBkYXRlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYXMgZmEtZWRpdCI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImhpZGUtb24tbW9iaWxlIj5FZGl0YXI8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIElmIGVzIGRpcmVjdG9yLCBtb3N0cmFyIGVzdGFzIG9wY2lvbmVzIC0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtdC0yIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIFNpIGVzdGFkbyAwLCBvIDIgOjogMDogTm8gcGx1YmljYWRvLCAxOiBQdWJsaWNhZG8sIDI6IE9iZXJ2YWRvIC0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gU2kgZXN0YWRvIDAsIG8gMiA6OiAwOiBObyBwbHViaWNhZG8sIDE6IFB1YmxpY2FkbywgMjogT2JlcnZhZG8gLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImJ0biBidG4teHMgYnRuLXllbGxvdyBtbC0yIG1yLTIgdGV4dC13aGl0ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz0iVXBkYXRlRXN0YWRvKGVsZWNjaW9uLmlkLCAwKSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmFzIGZhLWhhbmQtcGFwZXIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJoaWRlLW9uLW1vYmlsZSI+T2JzZXJ2YXI8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkIG1iLTIiIHYtaWY9ImVsZWNjaW9uLmVzdGFkbyA9PSAwIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJsaXN0LWdyb3VwLWl0ZW0gbGlzdC1ncm91cC1pdGVtLWFjdGlvbiBweS00IgogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZC1mbGV4IGp1c3RpZnktY29udGVudC1iZXR3ZWVuIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1yLTQgZC1mbGV4Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJpY29uLXN0YWNrIGljb24tc3RhY2sgYmcteWVsbG93IHRleHQtd2hpdGUgZmxleC1zaHJpbmstMCBtci00IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhcyBmYS1oYW5kLXBhcGVyIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxyb3V0ZXItbGluawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOnRvPSJ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhdGg6ICcvZWxlY2Npb25lcy8nICsgZWxlY2Npb24uaWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgyIGNsYXNzPSJ0ZXh0LXllbGxvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7IGVsZWNjaW9uLm5vbWJyZXMgfX0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9yb3V0ZXItbGluaz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iY2FyZC10ZXh0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7IGVsZWNjaW9uLmRlc2NyaXBjaW9uIH19PGJyIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBGZWNoYToge3sgZWxlY2Npb24uZmVjaGEgfX08YnIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEhvcmEgSW5pY2lvOiB7eyBlbGVjY2lvbi5ob3JhaW5pY2lvIH19IHwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEhvcmEgRmluOiB7eyBlbGVjY2lvbi5ob3JhZmluIH19CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ic21hbGwgdGV4dC1kYXJrIGZsZXgtc2hyaW5rLTAgdGV4dC1yaWdodCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUG9yIHt7IHR5cGVVc2VyIH19PGJyIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iYmFkZ2UgYmFkZ2UteWVsbG93IGJhZGdlLXBpbGwgdGV4dC13aGl0ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9ic2VydmFkbwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibXQtMiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImJ0biBidG4teHMgYnRuLWluZGlnby1zb2Z0IG1sLTIgbXItMiB0ZXh0LWluZGlnbyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz0ib3Blbk1vZGFsVXBkYXRlKGluZGV4KSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZj0iYnRuVXBkYXRlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYXMgZmEtZWRpdCI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImhpZGUtb24tbW9iaWxlIj5FZGl0YXI8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJidG4gYnRuLXhzIGJ0bi1yZWQtc29mdCBtbC0yIG1yLTIgdGV4dC1yZWQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAY2xpY2s9IlVwZGF0ZUVzdGFkbyhlbGVjY2lvbi5pZCwgMikiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhcyBmYS10cmFzaC1hbHQiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJoaWRlLW9uLW1vYmlsZSI+UGFwZWxlcmE8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIElmIGVzIGRpcmVjdG9yLCBtb3N0cmFyIGVzdGFzIG9wY2lvbmVzIC0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtdC0yIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIFNpIGVzdGFkbyAwLCBvIDIgOjogMDogTm8gcGx1YmljYWRvLCAxOiBQdWJsaWNhZG8sIDI6IE9iZXJ2YWRvIC0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJidG4gYnRuLXhzIGJ0bi1ncmVlbi1zb2Z0IG1sLTIgbXItMiB0ZXh0LWdyZWVuIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1vbjpjbGljaz0iVXBkYXRlRXN0YWRvKGVsZWNjaW9uLmlkLCAxKSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmFzIGZhLWxhcHRvcCI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImhpZGUtb24tbW9iaWxlIj5QdWJsaWNhcjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQgbWItMiIgdi1pZj0iZWxlY2Npb24uZXN0YWRvID09IDIiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Imxpc3QtZ3JvdXAtaXRlbSBsaXN0LWdyb3VwLWl0ZW0tYWN0aW9uIHB5LTQiCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkLWZsZXgganVzdGlmeS1jb250ZW50LWJldHdlZW4iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibXItNCBkLWZsZXgiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Imljb24tc3RhY2sgaWNvbi1zdGFjayBiZy1yZWQgdGV4dC13aGl0ZSBmbGV4LXNocmluay0wIG1yLTQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmFzIGZhLXRyYXNoLWFsdCI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cm91dGVyLWxpbmsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDp0bz0iewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXRoOiAnL2VsZWNjaW9uZXMvJyArIGVsZWNjaW9uLmlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMiBjbGFzcz0idGV4dC1yZWQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eyBlbGVjY2lvbi5ub21icmVzIH19CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2gyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcm91dGVyLWxpbms+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImNhcmQtdGV4dCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eyBlbGVjY2lvbi5kZXNjcmlwY2lvbiB9fTxiciAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRmVjaGE6IHt7IGVsZWNjaW9uLmZlY2hhIH19PGJyIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBIb3JhIEluaWNpbzoge3sgZWxlY2Npb24uaG9yYWluaWNpbyB9fSB8CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBIb3JhIEZpbjoge3sgZWxlY2Npb24uaG9yYWZpbiB9fQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InNtYWxsIHRleHQtZGFyayBmbGV4LXNocmluay0wIHRleHQtcmlnaHQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBvciB7eyB0eXBlVXNlciB9fTxiciAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImJhZGdlIGJhZGdlLXJlZCBiYWRnZS1waWxsIHRleHQtd2hpdGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBFbiBQYXBlbGVyYQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSBJZiBlcyBkaXJlY3RvciwgbW9zdHJhciBlc3RhcyBvcGNpb25lcyAtLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibXQtMiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSBTaSBlc3RhZG8gMCwgbyAyIDo6IDA6IE5vIHBsdWJpY2FkbywgMTogUHVibGljYWRvLCAyOiBPYmVydmFkbyAtLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iYnRuIGJ0bi14cyBidG4teWVsbG93IG1sLTIgbXItMiB0ZXh0LXdoaXRlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGNsaWNrPSJVcGRhdGVFc3RhZG8oZWxlY2Npb24uaWQsIDApIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYXMgZmEtZmxhZyI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImhpZGUtb24tbW9iaWxlIj5PYnNlcnZhcjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iYnRuIGJ0bi14cyBidG4tcmVkIG1sLTIgbXItMiB0ZXh0LXdoaXRlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGNsaWNrPSJvcGVuTW9kYWxEZWxldGUoaW5kZXgpIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYXMgZmEtdHJhc2gtYWx0Ij48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaGlkZS1vbi1tb2JpbGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID5FbGltaW5hciBwb3IgY29tcGxldG88L3NwYW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgICAgICB2LWVsc2UKICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibGlzdC1ncm91cCBsaXN0LWdyb3VwLWZsdXNoIHRleHQtbGVmdCBweS01IHB4LTUiCiAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICA8aDIgY2xhc3M9InRleHQtd2FybmluZyI+CiAgICAgICAgICAgICAgICAgICAgICBObyBoYXkgZWxlY2Npb25lcyEgQWdyZWd1ZSB1bm8uCiAgICAgICAgICAgICAgICAgICAgPC9oMj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1iLTIiIHYtZWxzZT4KICAgICAgICAgICAgICAgICAgPGgyPkNhcmdhbmRvLi4uPC9oMj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICA8L2Rpdj4KCiAgICAgIDwhLS0gTW9kYWwgU2F2ZSBDdXJzbyAtLT4KICAgICAgPGItbW9kYWwgaWQ9Im1vZGFsU2F2ZSIgY2VudGVyZWQ+CiAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDptb2RhbC1oZWFkZXI9IiI+CiAgICAgICAgICA8aDMgY2xhc3M9Im1vZGFsLXRpdGxlIHRleHQtYmx1ZSI+QWdyZWdhciB1bmEgb3JnYW5pemFjacOzbjwvaDM+CiAgICAgICAgPC90ZW1wbGF0ZT4KICAgICAgICA8dGVtcGxhdGUgdi1zbG90OmRlZmF1bHQ9IiI+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLXJvdyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAgY29sLW1kLTEyIHRleHQtbGVmdCI+CiAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJzbWFsbCB0ZXh0LWdyYXktNjAwIiBmb3I9ImxlYWRDYXBGaXJzdE5hbWUiCiAgICAgICAgICAgICAgICA+Tm9tYnJlIGRlIGxhIGVsZWNjacOzbjwvbGFiZWwKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgPGlucHV0CiAgICAgICAgICAgICAgICB2LW1vZGVsPSJUb1NhdmUubm9tYnJlcyIKICAgICAgICAgICAgICAgIGNsYXNzPSJmb3JtLWNvbnRyb2wiCiAgICAgICAgICAgICAgICB0eXBlPSJ0ZXh0IgogICAgICAgICAgICAgIC8+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLXJvdyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAgY29sLW1kLTEyIHRleHQtbGVmdCI+CiAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJzbWFsbCB0ZXh0LWdyYXktNjAwIiBmb3I9ImxlYWRDYXBGaXJzdE5hbWUiCiAgICAgICAgICAgICAgICA+RGVzY3JpcGNpw7NuIGRlIGxhIGVsZWNjacOzbjwvbGFiZWwKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgPHRleHRhcmVhCiAgICAgICAgICAgICAgICB2LW1vZGVsPSJUb1NhdmUuZGVzY3JpcGNpb24iCiAgICAgICAgICAgICAgICBjbGFzcz0iZm9ybS1jb250cm9sIgogICAgICAgICAgICAgICAgdHlwZT0idGV4dCIKICAgICAgICAgICAgICAvPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1yb3ciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIGNvbC1tZC0xMiB0ZXh0LWxlZnQiPgogICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0ic21hbGwgdGV4dC1ncmF5LTYwMCI+RmVjaGEgZGUgbGEgZWxlY2Npw7NuPC9sYWJlbD4KICAgICAgICAgICAgICA8aW5wdXQKICAgICAgICAgICAgICAgIHYtbW9kZWw9IlRvU2F2ZS5mZWNoYSIKICAgICAgICAgICAgICAgIGNsYXNzPSJmb3JtLWNvbnRyb2wiCiAgICAgICAgICAgICAgICB0eXBlPSJkYXRlIgogICAgICAgICAgICAgIC8+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLXJvdyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAgY29sLW1kLTYgdGV4dC1sZWZ0Ij4KICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9InNtYWxsIHRleHQtZ3JheS02MDAiIGZvcj0ibGVhZENhcEZpcnN0TmFtZSIKICAgICAgICAgICAgICAgID5Ib3JhIEluaWNpbzwvbGFiZWwKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgPGlucHV0CiAgICAgICAgICAgICAgICB2LW1vZGVsPSJUb1NhdmUuaG9yYWluaWNpbyIKICAgICAgICAgICAgICAgIGNsYXNzPSJmb3JtLWNvbnRyb2wiCiAgICAgICAgICAgICAgICB0eXBlPSJ0aW1lIgogICAgICAgICAgICAgIC8+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIGNvbC1tZC02IHRleHQtbGVmdCI+CiAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJzbWFsbCB0ZXh0LWdyYXktNjAwIiBmb3I9ImxlYWRDYXBGaXJzdE5hbWUiCiAgICAgICAgICAgICAgICA+SG9yYSBGaW48L2xhYmVsCiAgICAgICAgICAgICAgPgogICAgICAgICAgICAgIDxpbnB1dAogICAgICAgICAgICAgICAgdi1tb2RlbD0iVG9TYXZlLmhvcmFmaW4iCiAgICAgICAgICAgICAgICBjbGFzcz0iZm9ybS1jb250cm9sIgogICAgICAgICAgICAgICAgdHlwZT0idGltZSIKICAgICAgICAgICAgICAvPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgIDxkaXYgY2xhc3M9ImVycm9yLW1vZGFsIiB2LWlmPSJUb1NhdmUuZXJyb3IiPgogICAgICAgICAgICA8c3BhbiBjbGFzcz0idGV4dC1yZWQiPiB7eyBUb1NhdmUuZXJyb3JfbWVzc2FnZSB9fTwvc3Bhbj4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvdGVtcGxhdGU+CgogICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6bW9kYWwtZm9vdGVyPSJ7IG9rLCBjYW5jZWwgfSI+CiAgICAgICAgICA8Yi1idXR0b24KICAgICAgICAgICAgc2l6ZT0ibWQiCiAgICAgICAgICAgIGNsYXNzPSJidG4gYnRuLWRhbmdlciByb3VuZGVkLXBpbGwiCiAgICAgICAgICAgIEBjbGljaz0iY2FuY2VsKCkiCiAgICAgICAgICA+CiAgICAgICAgICAgIENhbmNlbGFyCiAgICAgICAgICA8L2ItYnV0dG9uPgogICAgICAgICAgPGItYnV0dG9uCiAgICAgICAgICAgIHNpemU9Im1kIgogICAgICAgICAgICBjbGFzcz0iYnRuIGJ0bi1ibHVlIHJvdW5kZWQtcGlsbCIKICAgICAgICAgICAgQGNsaWNrPSJTYXZlIgogICAgICAgICAgICByZWY9ImJ0blNhdmVDdXJzbyIKICAgICAgICAgID4KICAgICAgICAgICAgQWdyZWdhciBlbGVjY2nDs24KICAgICAgICAgIDwvYi1idXR0b24+CiAgICAgICAgPC90ZW1wbGF0ZT4KICAgICAgPC9iLW1vZGFsPgogICAgICA8IS0tIEVuZCBtb2RhbCAtLT4KCiAgICAgIDwhLS0gTW9kYWwgVXBkYXRlIEN1cnNvIC0tPgogICAgICA8Yi1tb2RhbCBpZD0ibW9kYWxVcGRhdGUiIGNlbnRlcmVkPgogICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6bW9kYWwtaGVhZGVyPSIiPgogICAgICAgICAgPGgzIGNsYXNzPSJtb2RhbC10aXRsZSB0ZXh0LWJsdWUiPgogICAgICAgICAgICBFZGl0YXIgb3JnYW5pemFjacOzbgogICAgICAgICAgICA8c3BhbiBjbGFzcz0iZm9udC13ZWlnaHQtYm9sZCI+e3sgVG9VcGRhdGUubm9tYnJlcyB9fTwvc3Bhbj4KICAgICAgICAgIDwvaDM+CiAgICAgICAgPC90ZW1wbGF0ZT4KICAgICAgICA8dGVtcGxhdGUgdi1zbG90OmRlZmF1bHQ9IiI+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLXJvdyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAgY29sLW1kLTEyIHRleHQtbGVmdCI+CiAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJzbWFsbCB0ZXh0LWdyYXktNjAwIiBmb3I9ImxlYWRDYXBGaXJzdE5hbWUiCiAgICAgICAgICAgICAgICA+Tm9tYnJlIGRlIGxhIGVsZWNjacOzbjwvbGFiZWwKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgPGlucHV0CiAgICAgICAgICAgICAgICB2LW1vZGVsPSJUb1VwZGF0ZS5ub21icmVzIgogICAgICAgICAgICAgICAgY2xhc3M9ImZvcm0tY29udHJvbCIKICAgICAgICAgICAgICAgIHR5cGU9InRleHQiCiAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tcm93Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCBjb2wtbWQtMTIgdGV4dC1sZWZ0Ij4KICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9InNtYWxsIHRleHQtZ3JheS02MDAiIGZvcj0ibGVhZENhcEZpcnN0TmFtZSIKICAgICAgICAgICAgICAgID5EZXNjcmlwY2nDs24gZGUgbGEgZWxlY2Npw7NuPC9sYWJlbAogICAgICAgICAgICAgID4KICAgICAgICAgICAgICA8dGV4dGFyZWEKICAgICAgICAgICAgICAgIHYtbW9kZWw9IlRvVXBkYXRlLmRlc2NyaXBjaW9uIgogICAgICAgICAgICAgICAgY2xhc3M9ImZvcm0tY29udHJvbCIKICAgICAgICAgICAgICAgIHR5cGU9InRleHQiCiAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tcm93Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCBjb2wtbWQtMTIgdGV4dC1sZWZ0Ij4KICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9InNtYWxsIHRleHQtZ3JheS02MDAiPkZlY2hhIGRlIGxhIGVsZWNjacOzbjwvbGFiZWw+CiAgICAgICAgICAgICAgPGlucHV0CiAgICAgICAgICAgICAgICB2LW1vZGVsPSJUb1VwZGF0ZS5mZWNoYSIKICAgICAgICAgICAgICAgIGNsYXNzPSJmb3JtLWNvbnRyb2wiCiAgICAgICAgICAgICAgICB0eXBlPSJkYXRlIgogICAgICAgICAgICAgICAgZGF0YS1kYXRlLWZvcm1hdD0iREQvTU1NTS9ZWVlZIgogICAgICAgICAgICAgIC8+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLXJvdyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAgY29sLW1kLTYgdGV4dC1sZWZ0Ij4KICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9InNtYWxsIHRleHQtZ3JheS02MDAiIGZvcj0ibGVhZENhcEZpcnN0TmFtZSIKICAgICAgICAgICAgICAgID5Ib3JhIEluaWNpbzwvbGFiZWwKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgPGlucHV0CiAgICAgICAgICAgICAgICB2LW1vZGVsPSJUb1VwZGF0ZS5ob3JhaW5pY2lvIgogICAgICAgICAgICAgICAgY2xhc3M9ImZvcm0tY29udHJvbCIKICAgICAgICAgICAgICAgIHR5cGU9InRpbWUiCiAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAgY29sLW1kLTYgdGV4dC1sZWZ0Ij4KICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9InNtYWxsIHRleHQtZ3JheS02MDAiIGZvcj0ibGVhZENhcEZpcnN0TmFtZSIKICAgICAgICAgICAgICAgID5Ib3JhIEZpbjwvbGFiZWwKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgPGlucHV0CiAgICAgICAgICAgICAgICB2LW1vZGVsPSJUb1VwZGF0ZS5ob3JhZmluIgogICAgICAgICAgICAgICAgY2xhc3M9ImZvcm0tY29udHJvbCIKICAgICAgICAgICAgICAgIHR5cGU9InRpbWUiCiAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDxkaXYgY2xhc3M9ImVycm9yLW1vZGFsIiB2LWlmPSJUb1VwZGF0ZS5lcnJvciI+CiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0ZXh0LXJlZCI+IHt7IFRvVXBkYXRlLmVycm9yX21lc3NhZ2UgfX08L3NwYW4+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L3RlbXBsYXRlPgoKICAgICAgICA8dGVtcGxhdGUgdi1zbG90Om1vZGFsLWZvb3Rlcj0ieyBvaywgY2FuY2VsIH0iPgogICAgICAgICAgPGItYnV0dG9uCiAgICAgICAgICAgIHNpemU9Im1kIgogICAgICAgICAgICBjbGFzcz0iYnRuIGJ0bi1kYW5nZXIgcm91bmRlZC1waWxsIgogICAgICAgICAgICBAY2xpY2s9ImNhbmNlbCgpIgogICAgICAgICAgPgogICAgICAgICAgICBDYW5jZWxhcgogICAgICAgICAgPC9iLWJ1dHRvbj4KICAgICAgICAgIDxiLWJ1dHRvbgogICAgICAgICAgICBzaXplPSJtZCIKICAgICAgICAgICAgY2xhc3M9ImJ0biBidG4tYmx1ZSByb3VuZGVkLXBpbGwiCiAgICAgICAgICAgIEBjbGljaz0iVXBkYXRlIgogICAgICAgICAgICByZWY9ImJ0blVwZGF0ZSIKICAgICAgICAgID4KICAgICAgICAgICAgR3VhcmRhciBDYW1iaW9zCiAgICAgICAgICA8L2ItYnV0dG9uPgogICAgICAgIDwvdGVtcGxhdGU+CiAgICAgIDwvYi1tb2RhbD4KICAgICAgPCEtLSBFbmQgbW9kYWwgLS0+CiAgICAgIDwhLS0gTW9kYWwgRGVsZXRlIENsYXNlIC0tPgogICAgICA8Yi1tb2RhbCBpZD0ibW9kYWxEZWxldGUiIGNlbnRlcmVkPgogICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6bW9kYWwtaGVhZGVyPSIiPgogICAgICAgICAgPGgzIGNsYXNzPSJtb2RhbC10aXRsZSI+RXN0w6FzIGFwdW50byBkZSBlbGltaW5hciBsYSBlbGVjY2nDs246PC9oMz4KICAgICAgICA8L3RlbXBsYXRlPgogICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6ZGVmYXVsdD0iIj4KICAgICAgICAgIDxoNCBjbGFzcz0idGV4dC1yZWQiPnt7IFRvRGVsZXRlLm5vbWJyZXMgfX08L2g0PgogICAgICAgICAgPHA+CiAgICAgICAgICAgIE5vdGE6IFBhcmEgcG9kZXIgZWxpbWluYXIgcG9yIGNvbXBsZXRvLCBubyBkZWJlciBoYWJlciBuaW5ndW5hCiAgICAgICAgICAgIHByZWd1bnRhIGFjdGl2YSwgcG9yIGZhdm9yIGVsaW1pbmEgbGFzIHByZWd1bnRhcyB5IG9wY2lvbmVzIHkKICAgICAgICAgICAgbHVlZ28gcmVncmVzZSBwYXJhIHBvZGVyIGVsaW1pbmFyIHBvciBjb21wbGV0by4KICAgICAgICAgIDwvcD4KICAgICAgICA8L3RlbXBsYXRlPgogICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6bW9kYWwtZm9vdGVyPSJ7IG9rLCBjYW5jZWwgfSI+CiAgICAgICAgICA8Yi1idXR0b24KICAgICAgICAgICAgc2l6ZT0ibWQiCiAgICAgICAgICAgIGNsYXNzPSJidG4gYnRuLXdoaXRlIHJvdW5kZWQtcGlsbCIKICAgICAgICAgICAgQGNsaWNrPSJjYW5jZWwoKSIKICAgICAgICAgID4KICAgICAgICAgICAgQ2FuY2VsYXIKICAgICAgICAgIDwvYi1idXR0b24+CiAgICAgICAgICA8Yi1idXR0b24KICAgICAgICAgICAgc2l6ZT0ibWQiCiAgICAgICAgICAgIGNsYXNzPSJidG4gYnRuLXJlZCByb3VuZGVkLXBpbGwiCiAgICAgICAgICAgIEBjbGljaz0iRGVsZXRlIgogICAgICAgICAgICByZWY9ImJ0bkRlbGV0ZSIKICAgICAgICAgID4KICAgICAgICAgICAgPGkgY2xhc3M9ImZhcyBmYS10cmFzaC1hbHQiPjwvaT4gRWxpbWluYXIKICAgICAgICAgIDwvYi1idXR0b24+CiAgICAgICAgPC90ZW1wbGF0ZT4KICAgICAgPC9iLW1vZGFsPgogICAgICA8IS0tIEVuZCBtb2RhbCAtLT4KICAgIDwvZGl2PgogIDwvaGVhZGVyPgoKICA8ZGl2IGNsYXNzPSJkYXNoIiB2LWVsc2U+CiAgICA8cD5Mb2FuZGluZy4uLjwvcD4KICA8L2Rpdj4KPC9kaXY+Cg=="},null]}