{"remainingRequest":"/Applications/XAMPP/xamppfiles/htdocs/vue/elecciones/node_modules/vue-loader/lib/index.js??vue-loader-options!/Applications/XAMPP/xamppfiles/htdocs/vue/elecciones/src/views/votar/Eligir.vue?vue&type=template&id=68f12dcb&scoped=true&","dependencies":[{"path":"/Applications/XAMPP/xamppfiles/htdocs/vue/elecciones/src/views/votar/Eligir.vue","mtime":1602336256302},{"path":"/Applications/XAMPP/xamppfiles/htdocs/vue/elecciones/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Applications/XAMPP/xamppfiles/htdocs/vue/elecciones/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Applications/XAMPP/xamppfiles/htdocs/vue/elecciones/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Applications/XAMPP/xamppfiles/htdocs/vue/elecciones/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CiA8ZGl2IGNsYXNzPSJkYXNoYm9hcmQiPgogICA8aGVhZGVyIGNsYXNzPSJtdC01IG1iLTEwIHBiLTEwIHBhZ2UtaGVhZGVyLWxpZ2h0IGJnLXdoaXRlIiB2LWlmPSIhbG9hbmRpbmciPgogICAgIDxkaXYgdi1pZj0idHlwZVVzZXIgIT0gJ1ZvdGFudGUnIj4KICAgICAgIDxOb3RBY2Nlc3MgLz4KICAgICA8L2Rpdj4KICAgICA8ZGl2IHYtZWxzZT4KICAgICAgIDxkaXYgY2xhc3M9InBhZ2UtaGVhZGVyLWNvbnRlbnQiPgogICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPgogICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIj4KICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC14bC00IG1iLTUiPgogICAgICAgICAgICAgICA8cm91dGVyLWxpbmsKICAgICAgICAgICAgICAgICAgICAgOnRvPSJ7CiAgICAgICAgICAgICAgICAgICAgICAgcGF0aDoKICAgICAgICAgICAgICAgICAgICAgICAgICcvdm90YXIvJwogICAgICAgICAgICAgICAgICAgICB9IgogICAgICAgICAgICAgICAgICAgICBjbGFzcz0iYnRuIGJ0bi13YXJuaW5nIHJvdW5kZWQtcGlsbCIKICAgICAgICAgICAgICAgICAgICAgPjxpIGNsYXNzPSJmYXMgZmEtYXJyb3ctbGVmdCI+PC9pPiBSZWdyZXNhcjwvcm91dGVyLWxpbmsKICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgIDxociAvPgogICAgICAgICAgICAgICA8aW1nCiAgICAgICAgICAgICAgICAgY2xhc3M9Im1iLTQiCiAgICAgICAgICAgICAgICAgc3JjPSJodHRwczovL3d3dy5mbGF0aWNvbi5lcy9zdmcvc3RhdGljL2ljb25zL3N2Zy8zMjg4LzMyODgzNjcuc3ZnIgogICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMTByZW07IgogICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICA8aDEgY2xhc3M9InRleHQtYmx1ZSBmb250LXdlaWdodC1ib2xkIj4KICAgICAgICAgICAgICAgICB7eyBjdXJyZW50VXNlci5ub21icmVzIH19CiAgICAgICAgICAgICAgIDwvaDE+CiAgICAgICAgICAgICAgIDxwIGNsYXNzPSJwYWdlLWhlYWRlci10ZXh0Ij4KICAgICAgICAgICAgICAgICBFbWl0ZSB0dSB2b3RvIGNvbiB0b3RhbCBmYWNpbGlkYWQuCiAgICAgICAgICAgICAgIDwvcD4KCiAgICAgICAgICAgICAgICAgPGhyPgogICAgICAgICAgICAgICAgIDxoMj5Pcmdhbml6YWNpw7NuPC9oMj4KICAgICAgICAgICAgICAgICA8c3Ryb25nPk5vbWJyZTo8L3N0cm9uZz4ge3tjdXJyZW50VXNlci5vcmdhbml6YWNpb25bMF0ubm9tYnJlc319PGJyPgogICAgICAgICAgICAgICAgIDxzdHJvbmc+RGVzY3JpcGNpw7NuOjwvc3Ryb25nPiB7e2N1cnJlbnRVc2VyLm9yZ2FuaXphY2lvblswXS5kZXNjaXBjaW9ufX08YnI+CiAgICAgICAgICAgICAgICAgPHN0cm9uZz5EaXJlY2Npw7NuOjwvc3Ryb25nPiB7e2N1cnJlbnRVc2VyLm9yZ2FuaXphY2lvblswXS5kaXJlY2Npb259fTxicj4KICAgICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1pZj0iY3VycmVudFVzZXIub3JnYW5pemFjaW9uWzBdLmVzdGFkbyA9PSAwIj4KICAgICAgICAgICAgICAgICAgIDxzdHJvbmc+RXN0YWRvOjwvc3Ryb25nPiA8YiBjbGFzcz0idGV4dC13YXJuaW5nIj5JTkFDVElWTzwvYj48YnI+CiAgICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT4KICAgICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1pZj0iY3VycmVudFVzZXIub3JnYW5pemFjaW9uWzBdLmVzdGFkbyA9PSAxIj4KICAgICAgICAgICAgICAgICAgIDxzdHJvbmc+RXN0YWRvOjwvc3Ryb25nPiA8YiBjbGFzcz0idGV4dC13YXJuaW5nIj5BQ1RJVk88L2I+PGJyPgogICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+CiAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtaWY9ImN1cnJlbnRVc2VyLm9yZ2FuaXphY2lvblswXS5lc3RhZG8gPT0gMiI+CiAgICAgICAgICAgICAgICAgICA8c3Ryb25nPkVzdGFkbzo8L3N0cm9uZz4gPGIgY2xhc3M9InRleHQtd2FybmluZyI+U1VTUEVORElETzwvYj48YnI+CiAgICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT4KICAgICAgICAgICAgICAgICA8c3Ryb25nPkZlY2hhIENyZWFkYTo8L3N0cm9uZz4ge3tjdXJyZW50VXNlci5vcmdhbml6YWNpb25bMF0uZmVjaGFjcmVhZGF9fQoKICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC14bC04IGNvbC1sZy0xMCB0ZXh0LWNlbnRlciBwdC01Ij4KICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgdGV4dC1jZW50ZXIgbWItNCI+CiAgICAgICAgICAgICAgICAgICA8IS0tIEhlYWRlciBzZWN0aW9uIGZvciBidXR0b25zIHtjcmVhdGV9IC0tPgogICAgICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICAgPGgxIHYtaWY9ImVsZWNjaW9uLmRhdGEubGVuZ3RoPjAiCiAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InRleHQtY2FwaXRhbGl6ZSAgdGV4dC1wcmltYXJ5IGZvbnQtd2VpZ2h0LWJvbGQiCiAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICBWb3RhY2lvbmVzIHBhcmEge3sgZWxlY2Npb24uZGF0YVswXS5ub21icmVzIH19CiAgICAgICAgICAgICAgICAgICAgIDwvaDE+CiAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250ZW50Ij4KICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1iLTIiIHYtaWY9IiFwcmVndW50YXMubG9hbmRpbmciPgogICAgICAgICAgICAgICAgICAgICA8ZGl2IHYtaWY9InByZWd1bnRhcy5kYXRhLmxlbmd0aCA+IDAiPgogICAgICAgICAgICAgICAgICAgICAgIDxkaXYgdi1pZj0idmVyaWZpY2FyVm90YWNpb24uZGF0YS5sZW5ndGggPD0gMCI+CiAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2FyZCBtYi00IgogICAgICAgICAgICAgICAgICAgICAgICAgdi1mb3I9IihwcmVndW50YSwgaW5kZXgpIGluIHByZWd1bnRhcy5kYXRhIgogICAgICAgICAgICAgICAgICAgICAgICAgdi1iaW5kOnRvZG89InByZWd1bnRhIgogICAgICAgICAgICAgICAgICAgICAgICAgdi1iaW5kOmtleT0icHJlZ3VudGEuaWQiCiAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1oZWFkZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Imljb24tc3RhY2sgaWNvbi1zdGFjayBiZy1ibHVlIHRleHQtd2hpdGUgZmxleC1zaHJpbmstMCBtci00IgogICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3sgaW5kZXggKyAxIH19CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0ZXh0LXJpZ2h0IHRpdGxlLXRlbWEiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMiBjbGFzcz0idGV4dC1ibHVlIGZvbnQtd2VpZ2h0LWJvbGQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3sgcHJlZ3VudGEucHJlZ3VudGEgfX0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2gyPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1ib2R5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9InRleHQtbGVmdCI+e3sgcHJlZ3VudGEuZGVzY3JpcGNpb24gfX08L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0idGV4dC1sZWZ0IHRleHQtYmx1ZSBmb250LXdlaWdodC1ib2xkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPcGNpb25lcwogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2gzPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1mb3I9IihvcGNpb24sIG9wY2lvbl9pbmRleCkgaW4gcHJlZ3VudGEub3BjaW9uZXMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1iaW5kOnRvZG89Im9wY2lvbiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LWJpbmQ6a2V5PSJvcGNpb24uaWQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHYtaWY9Im1hcmNhck9wY2lvbihwcmVndW50YS5pZCxvcGNpb24uaWQpIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNhcmQgYmctZ3JlZW4gcHktMiBwbC0yIHByLTIgbXQtMiBtYi0yIiAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkLWZsZXgganVzdGlmeS1jb250ZW50LWJldHdlZW4iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Imljb24tc3RhY2sgaWNvbi1zdGFjayBiZy13aGl0ZS1zb2Z0IGZvbnQtd2VpZ2h0LWJvbGQgdGV4dC1ibGFjayBmbGV4LXNocmluay0wIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3sgb3BjaW9uX2luZGV4ICsgMSB9fQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJ0aXRsZS1jbGFzcy1jb250ZW50IHRleHQtbGVmdCBwbC0zIHB0LTEiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idGV4dC1kYXJrIGZvbnQtd2VpZ2h0LWJvbGQiPnt7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGNpb24ub3BjaW9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfX08L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkLWZsZXggbXQtMSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImJ0biBidG4tbWQgYnRuLXdhcm5pbmcgbWwtMiBtci0yIHRleHQtd2hpdGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXNjb2dlck9wY2lvbigKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZWd1bnRhLmlkLHByZWd1bnRhLnByZWd1bnRhLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3BjaW9uLmlkLCBvcGNpb24ub3BjaW9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEVzY29naWRvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHYtZWxzZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNhcmQgYmctd2FybmluZy1zb2Z0IHB5LTIgcGwtMiBwci0yIG10LTIgbWItMiIgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZC1mbGV4IGp1c3RpZnktY29udGVudC1iZXR3ZWVuIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJpY29uLXN0YWNrIGljb24tc3RhY2sgYmctd2hpdGUtc29mdCBmb250LXdlaWdodC1ib2xkIHRleHQtYmxhY2sgZmxleC1zaHJpbmstMCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7IG9wY2lvbl9pbmRleCArIDEgfX0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0idGl0bGUtY2xhc3MtY29udGVudCB0ZXh0LWxlZnQgcGwtMyBwdC0xIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InRleHQtZGFyayBmb250LXdlaWdodC1ib2xkIj57ewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3BjaW9uLm9wY2lvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH19PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZC1mbGV4IG10LTEiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJidG4gYnRuLW1kIGJ0bi1wcmltYXJ5IG1sLTIgbXItMiB0ZXh0LXdoaXRlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAY2xpY2s9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVzY29nZXJPcGNpb24oCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmVndW50YS5pZCxwcmVndW50YS5wcmVndW50YSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wY2lvbi5pZCwgb3BjaW9uLm9wY2lvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBFc2NvZ2VyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImFsZXJ0IGFsZXJ0LWRhbmdlciBmb250LXdlaWdodC1ib2xkIHRleHQtbGVmdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+U2kgbm8gZXNjb2dlcyBuaSB1bmEgb3BjacOzbiwgc2UgbWFyY2FyYSBhdXRvbWF0aWNhbWVudGUgY29tbyAiRU4gQkxBTkNPIi48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5FbiBjYXNvIGRlIHF1ZSBxdWllcmFzIEFOVUxBUiB0dSB2b3RvLCBzb2xvIG1hcmNhICJOSU5HVU5PIiB5IHNlIGNvbnNpZGVyYXLDoSBOVUxPLjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IGJ0bi1sZyBsaWZ0IGZvbnQtd2VpZ2h0LWJvbGQiIEBjbGljaz0ib3Blbk1vZGFsUHJldmlld1ZvdG8oKSIKICAgICAgICAgICAgICAgICAgICAgICByZWY9ImJ0bkVtaXRpclZvdG8iPiAKICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly93d3cuZmxhdGljb24uZXMvc3ZnL3N0YXRpYy9pY29ucy9zdmcvMTA0OS8xMDQ5NTg3LnN2ZyIgd2lkdGg9IjUwIiBhbHQ9InZvdGFyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgUFJFVklTVUFMSVpBUiBZIFZPVEFSCiAgICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj4gCiAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgPGRpdiB2LWVsc2UgY2xhc3M9IiB0ZXh0LWxlZnQgcHktNSBweC01Ij4KICAgICAgICAgICAgICAgICAgICAgICAgIDxoMiBjbGFzcz0idGV4dC13YXJuaW5nIGZvbnQtd2VpZ2h0LWJvbGQgbWItMyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL3d3dy5mbGF0aWNvbi5jb20vc3ZnL3N0YXRpYy9pY29ucy9zdmcvMTE2MS8xMTYxMzkwLnN2ZyIgd2lkdGg9IjcwIiBhbHQ9IiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIFlhIEVtaXRpc3RlIHR1IHZvdG8uCiAgICAgICAgICAgICAgICAgICAgICAgICA8L2gyPgogICAgICAgICAgICAgICAgICAgICAgICAgPGJyPgogICAgICAgICAgICAgICAgICAgICAgICAgPGhyPgogICAgICAgICAgICAgICAgICAgICAgICAgPGgxPlJFU1VNRU4gREUgU1UgVk9UTzwvaDE+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxocj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgyIHYtaWY9ImVsZWNjaW9uLmRhdGEubGVuZ3RoPjAiPkVsZWNjaW9uZXM6IHt7ZWxlY2Npb24uZGF0YVswXS5ub21icmVzfX08L2gyPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8aDI+T3JnYW5pemFjacOzbjoge3tjdXJyZW50VXNlci5vcmdhbml6YWNpb25bMF0ubm9tYnJlc319PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGhyPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLXJvdyIgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LWZvcj0idm90YWNpb24gaW4gdmVyaWZpY2FyVm90YWNpb24uZGF0YSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYtYmluZDp0b2RvPSJ2b3RhY2lvbiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYtYmluZDprZXk9InZvdGFjaW9uLmlkIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAgY29sLW1kLTEyIHRleHQtbGVmdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9InRleHQtcHJpbWFyeSBmb250LXdlaWdodC1ib2xkIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+e3t2b3RhY2lvbi5wcmVndW50YX19PC9oMz48YnI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9InNtYWxsIHRleHQtZ3JheS02MDAgZm9udC13ZWlnaHQtYm9sZCI+e3t2b3RhY2lvbi5vcGNpb259fTwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICA8YnI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxocj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5Wb3RvIGVtaXRpZG8gZW4gPHN0cm9uZyBjbGFzcz0idGV4dC1wcmltYXJ5Ij5NYXlWb3RvPC9zdHJvbmc+PC9zcGFuPjxicj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5GZWNoYSB5IGhvcmE6IHt7dmVyaWZpY2FyVm90YWNpb24uZGF0YVswXS5mZWNoYXZvdGFjaW9ufX0gPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgICAgICAgICB2LWVsc2UKICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0icHktNSBweC01IgogICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgPGgyIGNsYXNzPSJ0ZXh0LXdhcm5pbmcgZm9udC13ZWlnaHQtYm9sZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICBObyBoYXkgcHJlZ3VudGFzIHBhcmEgZXN0YSBlbGVjY2nDs24uCiAgICAgICAgICAgICAgICAgICAgICAgPC9oMj4KICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1iLTIiIHYtZWxzZT4KICAgICAgICAgICAgICAgICAgICAgPGgyPkNhcmdhbmRvLi4uPC9oMj4KICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICA8ZGl2IGlkPSJwcmludC12b3RvIj4KICAgICAgICAgICAgIDxoMT5SRVNVTUVOIERFbCBWT1RPPC9oMT4KICAgICAgICAgICAgIDxocj4KICAgICAgICAgICAgIDxoMiB2LWlmPSJlbGVjY2lvbi5kYXRhLmxlbmd0aD4wIj5FbGVjY2lvbmVzOiB7e2VsZWNjaW9uLmRhdGFbMF0ubm9tYnJlc319PC9oMj4KICAgICAgICAgICAgIDxoMj5Pcmdhbml6YWNpw7NuOiB7e2N1cnJlbnRVc2VyLm9yZ2FuaXphY2lvblswXS5ub21icmVzfX08L2gyPgogICAgICAgICAgICAgPGhyPgogICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1yb3ciIAogICAgICAgICAgICAgICAgIHYtZm9yPSJ2b3RvIGluIHZvdG8uZGF0YSIKICAgICAgICAgICAgICAgICB2LWJpbmQ6dG9kbz0idm90byIKICAgICAgICAgICAgICAgICB2LWJpbmQ6a2V5PSJ2b3RvLmlkIgogICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCBjb2wtbWQtMTIgdGV4dC1sZWZ0Ij4KICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9InRleHQtcHJpbWFyeSBmb250LXdlaWdodC1ib2xkIgogICAgICAgICAgICAgICAgICAgPnt7dm90by5wcmVndW50YX19PC9oMz48YnI+CiAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJzbWFsbCB0ZXh0LWdyYXktNjAwIGZvbnQtd2VpZ2h0LWJvbGQiPnt7dm90by5vcGNpb259fTwvbGFiZWw+CiAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICA8YnI+CiAgICAgICAgICAgICA8YnI+CiAgICAgICAgICAgICA8YnI+CiAgICAgICAgICAgICA8aHI+CiAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICA8c3Bhbj5Wb3RvIGVtaXRpZG8gZW4gPHN0cm9uZyBjbGFzcz0idGV4dC1wcmltYXJ5Ij5NYXlWb3RvPC9zdHJvbmc+PC9zcGFuPjxicj4KICAgICAgICAgICAgICAgPHNwYW4+RmVjaGEgeSBob3JhOiB7e3RvZGF5fX0gPC9zcGFuPgogICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgPC9kaXY+CgoKICAgICAgICAgICA8IS0tIE1vZGFsIFNhdmUgUHJlZ3VudGEgLS0+CiAgICAgICAgIDxiLW1vZGFsIGlkPSJtb2RhbFByZXZpZXdWb3RvIiBjZW50ZXJlZD4KICAgICAgICAgICA8dGVtcGxhdGUgdi1zbG90Om1vZGFsLWhlYWRlcj0iIj4KICAgICAgICAgICAgIDxoMyBjbGFzcz0ibW9kYWwtdGl0bGUgdGV4dC1ibHVlIj5SRVNVTUVOIERFIFNVIFZPVE88L2gzPgogICAgICAgICAgIDwvdGVtcGxhdGU+CiAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDpkZWZhdWx0PSIiPgogICAgICAgICAgICAgPGgyIGNsYXNzPSJ0ZXh0LXByaW1hcnkiIHYtaWY9ImVsZWNjaW9uLmRhdGEubGVuZ3RoPjAiPnt7ZWxlY2Npb24uZGF0YVswXS5ub21icmVzfX08L2gyPgogICAgICAgICAgICAgPGgzPk9yZ2FuaXphY2nDs246IHt7Y3VycmVudFVzZXIub3JnYW5pemFjaW9uWzBdLm5vbWJyZXN9fTwvaDM+CiAgICAgICAgICAgICA8aHI+CiAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLXJvdyIgCiAgICAgICAgICAgICAgICAgdi1mb3I9InZvdG8gaW4gdm90by5kYXRhIgogICAgICAgICAgICAgICAgIHYtYmluZDp0b2RvPSJ2b3RvIgogICAgICAgICAgICAgICAgIHYtYmluZDprZXk9InZvdG8uaWQiCiAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIGNvbC1tZC0xMiB0ZXh0LWxlZnQiPgogICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0idGV4dC1kYXJrIGZvbnQtd2VpZ2h0LWJvbGQiCiAgICAgICAgICAgICAgICAgICA+e3t2b3RvLnByZWd1bnRhfX08L2xhYmVsPjxicj4KICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9InNtYWxsIHRleHQtZ3JheS02MDAgZm9udC13ZWlnaHQtYm9sZCI+e3t2b3RvLm9wY2lvbn19PC9sYWJlbD4KICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgIDxocj4KICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0iYnRuIGJ0bi1kYXJrIGJ0bi1zbSBtci0yIiBAY2xpY2s9InByaW50Vm90bygpIj4gPGkgY2xhc3M9ImZhcyBmYS1wcmludCI+PC9pPiBJbXByaW1pcjwvYnV0dG9uPgogICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJidG4gYnRuLWRhbmdlciBidG4tc20gbXItMiIgQGNsaWNrPSJwcmludFZvdG8oKSI+IDxpIGNsYXNzPSJmYXMgZmEtZmlsZS1wZGYiPjwvaT4gRGVzY2FyZ2FyIFBERjwvYnV0dG9uPgogICAgICAgICAgICAgPGRpdiBjbGFzcz0iZXJyb3ItbW9kYWwiIHYtaWY9ImVtaXRpclZvdG8uZXJyb3IiPgogICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idGV4dC1yZWQiPiB7eyBlbWl0aXJWb3RvLmVycm9yX21lc3NhZ2UgfX08L3NwYW4+CiAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICA8L3RlbXBsYXRlPgoKICAgICAgICAgICA8dGVtcGxhdGUgdi1zbG90Om1vZGFsLWZvb3Rlcj0ieyBvaywgY2FuY2VsIH0iPgogICAgICAgICAgICAgPGItYnV0dG9uCiAgICAgICAgICAgICAgIHNpemU9Im1kIgogICAgICAgICAgICAgICBjbGFzcz0iYnRuIGJ0bi13aGl0ZSByb3VuZGVkLXBpbGwiCiAgICAgICAgICAgICAgIEBjbGljaz0iY2FuY2VsKCkiCiAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgIENhbmNlbGFyCiAgICAgICAgICAgICA8L2ItYnV0dG9uPgogICAgICAgICAgICAgPGItYnV0dG9uCiAgICAgICAgICAgICAgIHNpemU9Im1kIgogICAgICAgICAgICAgICBjbGFzcz0iYnRuIGJ0bi1ibHVlIHJvdW5kZWQtcGlsbCIKICAgICAgICAgICAgICAgQGNsaWNrPSJ2b3RhciIKICAgICAgICAgICAgICAgcmVmPSJidG5Wb3RhciIKICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vd3d3LmZsYXRpY29uLmVzL3N2Zy9zdGF0aWMvaWNvbnMvc3ZnLzE1MzMvMTUzMzkxMy5zdmciIHdpZHRoPSIzMCIgYWx0PSIiPiBFTUlUSVIgVk9UTwogICAgICAgICAgICAgPC9iLWJ1dHRvbj4KICAgICAgICAgICA8L3RlbXBsYXRlPgogICAgICAgICA8L2ItbW9kYWw+CiAgICAgICAgIDwhLS0gRW5kIG1vZGFsIC0tPgoKPCEtLSBNb2RhbCBEZWxldGUgT3BjaW9uIC0tPgogICAgICAgICA8Yi1tb2RhbCBpZD0ibW9kYWxNZW5zYWplIiBjZW50ZXJlZD4KICAgICAgICAgICA8dGVtcGxhdGUgdi1zbG90Om1vZGFsLWhlYWRlcj0iIj4KICAgICAgICAgICAgIDxoMyBjbGFzcz0ibW9kYWwtdGl0bGUiIHYtaWY9ImVtaXRpclZvdG8ubl9lcnJvciA9PSAwIj5DYXJnYW5kby4uLjwvaDM+CiAgICAgICAgICAgICA8aDMgY2xhc3M9Im1vZGFsLXRpdGxlIiB2LWVsc2U+TWVuc2FqZTwvaDM+CiAgICAgICAgICAgPC90ZW1wbGF0ZT4KICAgICAgICAgICA8dGVtcGxhdGUgdi1zbG90OmRlZmF1bHQ9IiI+CiAgICAgICAgICAgICA8aSAgdi1pZj0iZW1pdGlyVm90by5uX2Vycm9yID09IDAiIGNsYXNzPSJmYXMgZmEtY2lyY2xlLW5vdGNoIGZhLXNwaW4gZmEtM3giPjwvaT4KICAgICAgICAgICAgIDxoMiB2LWVsc2UgY2xhc3M9InRleHQtZ3JlZW4gIj4KICAgICAgICAgICAgICAgU3Ugdm90byBmdWUgZW1pdGlkbyBleGl0w7NzYW1lbnRlIQogICAgICAgICAgICAgPC9oMj4KICAgICAgICAgICAgIDxocj4KICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0iYnRuIGJ0bi1kYXJrIGJ0bi1zbSBtci0yIiBAY2xpY2s9InByaW50Vm90bygpIj4gPGkgY2xhc3M9ImZhcyBmYS1wcmludCI+PC9pPiBJbXByaW1pcjwvYnV0dG9uPgogICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJidG4gYnRuLWRhbmdlciBidG4tc20gbXItMiIgQGNsaWNrPSJwcmludFZvdG8oKSI+IDxpIGNsYXNzPSJmYXMgZmEtZmlsZS1wZGYiPjwvaT4gRGVzY2FyZ2FyIFBERjwvYnV0dG9uPgogICAgICAgICAgIDwvdGVtcGxhdGU+CiAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDptb2RhbC1mb290ZXI9Insgb2ssIGNhbmNlbCB9Ij4KICAgICAgICAgICAgIDxiLWJ1dHRvbgogICAgICAgICAgICAgICBzaXplPSJtZCIKICAgICAgICAgICAgICAgY2xhc3M9ImJ0biBidG4td2hpdGUgcm91bmRlZC1waWxsIgogICAgICAgICAgICAgICBAY2xpY2s9ImNhbmNlbCgpIgogICAgICAgICAgICAgPgogICAgICAgICAgICAgICBDZXJyYXIKICAgICAgICAgICAgIDwvYi1idXR0b24+CiAgICAgICAgICAgICA8Yi1idXR0b24KICAgICAgICAgICAgICAgc2l6ZT0ibWQiCiAgICAgICAgICAgICAgIGNsYXNzPSJidG4gYnRuLXJlZCByb3VuZGVkLXBpbGwiCiAgICAgICAgICAgICAgIEBjbGljaz0iR29Ub0JhY2soKSIKICAgICAgICAgICAgICAgcmVmPSJidG5Pa01lbnNhamUiCiAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICBPSwogICAgICAgICAgICAgPC9iLWJ1dHRvbj4KICAgICAgICAgICA8L3RlbXBsYXRlPgogICAgICAgICA8L2ItbW9kYWw+CiAgICAgICAgIDwhLS0gRW5kIG1vZGFsIC0tPgoKCiAgICAgICAgIDwvZGl2PgogICAgICAgPC9kaXY+CiAgICAgPC9kaXY+CiAgIDwvaGVhZGVyPgoKICAgPGRpdiBjbGFzcz0iZGFzaCIgdi1lbHNlPgogICAgIDxwPkxvYW5kaW5nLi4uPC9wPgogICA8L2Rpdj4KIDwvZGl2Pgo="},null]}