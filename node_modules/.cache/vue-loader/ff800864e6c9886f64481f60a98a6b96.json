{"remainingRequest":"/Applications/XAMPP/xamppfiles/htdocs/vue/elecciones/node_modules/vue-loader/lib/index.js??vue-loader-options!/Applications/XAMPP/xamppfiles/htdocs/vue/elecciones/src/views/organizadores/Opciones.vue?vue&type=template&id=4fe67187&scoped=true&","dependencies":[{"path":"/Applications/XAMPP/xamppfiles/htdocs/vue/elecciones/src/views/organizadores/Opciones.vue","mtime":1602262301616},{"path":"/Applications/XAMPP/xamppfiles/htdocs/vue/elecciones/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Applications/XAMPP/xamppfiles/htdocs/vue/elecciones/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Applications/XAMPP/xamppfiles/htdocs/vue/elecciones/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Applications/XAMPP/xamppfiles/htdocs/vue/elecciones/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}